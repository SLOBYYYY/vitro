?lm
lm(data= myadata, y-x, model=FALSE,1:100)
lm(y-x, mydata,1:100,model=FALSE)
lm(y - x, mydata,1:100,model=FALSE)
plot(mydata)
hist(mydata)
lm(y - x, mydata,1:100,model=FALSE)
rm(x)
lm(y - x, mydata,1:100,model=FALSE)
lm("y - x", mydata,1:100,model=FALSE)
lm("x^2", mydata,1:100,model=FALSE)
hist(mydata)
f <- function(a,b) {}
f <- function(a,b) { a^2}
f(3)
f(2,3)
args(paste)
?paste
paste('fag','lord','mordekar')
?numeric
lm
?lm
search()
search("package:methods")
search("package")
search("methods")
?ls
ls(environment(lm))
ls(environment(rnorm))
ls(environment(lm))
x = 1:4
y=6:9
x+y
x*y
x/y
x = matrix(1:4, 2,2); y = matrix(rep(10,4), 2, 2)
x
y
x*y
x / y
x %*% y
x
y
?unclass
unclass(T)
unclass(as.Date("1999-01-22"))
unclass(as.Date("2014-04-27")) - unclass(as.Date("1985-10-19"))
28*365
Sys.time9)
Sys.time()
x=Sys.time()
typeof(x)
class(x)
as.POSIXlt(x)
y = as.POSIXlt(x)
x
y
names(unclass(x))
names(unclass(y))
unclass(x)
unclass(y)
?runif
lapply(1:5, runif)
?contour
?optim
?lm
library(MASS)
library(ISLR)
install.packages("ISLR")
library(ISLR)
fix(Boston)
names(Boston)
?Boston
ls()
rm(f)
rm(mydata)
rm(x,y)
lm.fit=lm(medv~lstat, data=Boston)
lm.fit
summary(lm.fit)
names(lm.fit)
coef(lm.fit)
confinf(lm.fit)
confint(lm.fit)
predict(lm.fit, data.frame(lstat=(c(5,10,15))), interval="confidence")
?predict
data.frame(lstat=c(1,2,3))
fix(Boston)
plot(lstat,medv)
plot(Boston$lstat,Boston$medv)
attach(Boston)
abline(lstat,medv)
abline(lm.fit)
abline(lm.fit)
plot(Boston$lstat,Boston$medv)
abline(lm.fit)
predict(lm.fit, data.frame(lstat=(c(5,10,15))), interval="confidence")[,1]
predict(lm.fit, Boston$lstat, interval="confidence")[,1]
predict(lm.fit, data.frame(Boston$lstat), interval="confidence")[,1]
pred = predict(lm.fit, data.frame(Boston$lstat), interval="confidence")[,1]
cbind(pred, Boston$lstat)
sumz = cbind(pred, Boston$lstat)
names(sumz)
class(names)
unclass(names)
?lapply
mse
mse()
library(hydroGOF)
install.packages("hydroGOF")
?transform
transform(sumz, diff = (sumz[2] - sumz[3])^2)
sumz
cbind(pred, Boston$medv)
sumz = cbind(pred, Boston$medv)
fix(sumz)
(sumz[2] - sumz[3])^2
(sumz[,2] - sumz[,3])^2
sumz[2]
names(sumz)
names(sumz$pred)
sumz$pred
?data.frame
x = data.frame(pred=sumz[,2], orig=sumz[,3])
dim(sumz)
x = data.frame(pred=sumz[,1], orig=sumz[,2])
x
x$pred -x$orig
(x$pred -x$orig)^2
sum((x$pred -x$orig)^2)
sum((x$pred -x$orig)^2) / 506
transform(x, diff=pred-orig)
transform(x, diff=pred-orig, sqdiff = (pred-orig)^2)
sum(transform(x, diff=pred-orig, sqdiff = (pred-orig)^2))
?sum
summary(lm.fit)
plot(lstat,medv)
abline(lm.fit)
abline(lm.fit, lwd=3)
abline(lm.fit, lwd=3, col="red")
plot(lstat,medv,col="red")
plot(lstat,medv,pch=20)
plot(lstat,medv,pch=19)
plot(lstat,medv,pch=3)
plot(lstat,medv,pch=4)
plot(lstat,medv,pch=5)
plot(lstat,medv,pch="+")
plot(lstat,medv,pch="3")
plot(lstat,medv,pch="qq")
plot(lstat,medv,pch="%")
plot(lstat,medv,pch="}")
plot(lstat,medv,pch="1:20")
plot(lstat,medv,pch=1:20)
plot(1:20,1:20,pch=1:20)
par(mfrow=c(2,2))
plot(lm.fit)
plot(predict(lm.fit), residuals(lm.fit))
plot(predict(lm.fit), rstudent(lm.fit))
plot(hatvalues(lm.fit))
which.max(hatvalues(lm.fit))
which.max(hatvalues(lm.fit))
lm.fit=lm(medv~lstat+age, data=Boston)
summary(lm.fit)
transform(x, lstat=Boston$lstat)
x=transform(x, lstat=Boston$lstat)
x
head(x)
plot(lstat, pred-orig)
plot(x$lstat, x$pred-x$orig)
par(mfrow=1)
par(mfrow=c(1))
par(mfrow=c(1,0))
par(mfrow=c(1,1))
plot(x$lstat, x$orig-x$pred)
plot(x$lstat, x$pred-x$orig)
plot(x$lstat, x$orig-x$pred)
summary(lm.fit)
lm.fit = lm(medv~lstat, data=Boston)
summary(lm.fit)
par(mfrow=c(2,1))
plot(predict(lm.fit), residuals(lm.fit))
plot(x$lstat, x$orig-x$pred)
plot(x$medv, x$orig-x$pred)
x = transform(x, medv=Boston$medv)
plot(x$medv, x$orig-x$pred)
plot(predict(lm.fit), residuals(lm.fit))
head(x)
x[,-4]
head(x[,-4])
x =x[,-4]
x
head(x)
names(x)
names(x) = c("pred","medv","lstat")
names(x)
head(x)
?predict
predict(lm.fit)
predict.lm(lm.fit)
?residuals
residuals(lm.fit)
tail(Boston)
plot(predict(lm.fit), residuals(lm.fit))
names(x)
plot(x$pred, x$pred-x$medv)
plot(predict(lm.fit), residuals(lm.fit))
plot(x$pred, x$medv-x$pred)
?rstudent
plot(predict(lm.fit), residuals(lm.fit))
par(mfrow=c(1,1))
plot(predict(lm.fit), residuals(lm.fit))
abline(lm.fit)
qq = lm(predict(lm.fit)~residuals(lm.fit))
abline(qq)
summary(qq)
plot(predict(lm.fit), residuals(lm.fit))
qq = lm(predict(lm.fit)~residuals(lm.fit))
qq
summary(qq)
abline(qq)
predict(lm.fit)
pred = predict(lm.fit)
resid = residuals(lm.fit)
resid
pred
lulu = lm(resid ~ predict)
lulu = lm(resid ~ pred)
sumamry(lulu)
summary(lulu)
argline(lulu)
abline(lulu)
lm.fit=lm(medv~lstat+age, data=Boston)
summary(lm.fit)
lm.fit=lm(medv~., data=Boston)
summary(lm.fit)
summary(lm.fit)$r.sq
summary(lm.fit)$r.sigma
summary(lm.fit)$sigma
install.packages("car")
vif(lm.fit)
library(car)
vif(lm.fit)
lm.fit1=lm(medv~.-age, data=Boston)
summary(lm.fit1)
summary(lm.fit)
summary(lm(medv~lstat*age, data=Boston))
lm.fit2=lm(medv~lstat+I(lstat^2))
summary(lm.fit2)
lm.fit=lm(medv~lstat)
anova(lm.fit, lm.fit2)
par(mfrow=c(2,2))
plot(lm.fit2)
lm.fit5=lm(medv~poly(lstat,5))
summary(lm.fit4)
summary(lm.fit5)
anova(lm.fit2, lm.fit5)
plot(lm.fit5)
summary(lm(medv~log(rm), data=Boston))
summary(lm(medv~rm, data=Boston))
fix(Carseats)
names(Carseats)
lm.fit = lm(Sales~.+Income:Advertising+Price:Age, data = Carseats)
summary(lm.fit)
contrasts(Carseats$ShelveLoc)
?contrasts
predict(lm.fit)
plot(lm.fit)
peteri@vnet.hu
?poly
poly(seq(4,6,0.5), 3)
(4,6,0.5)
seq(4,6,0.5)
1:3
poly(1:3,1)
poly(1:3,1)
?rpois
rpos(10)
rpois(10)
rpois(10, 1)
rpois(10, 1)
rpois(10, 1)
rpois(10, 1)
rpois(10, 44)
rpois(10, 44)
rpois(10, 44)
rpois(10, 44)
rpois(10, 44)
rpois(10, 44)
ppois(40,40)
ppois(40,40)
ppois(40,40)
ppois(40,40)
ppois(40,40)
ppois(40,40, lower.tail=T)
ppois(40,40, lower.tail=F)
ppois(40,40, lower.tail=F)
ppois(40,40)
ppois(40,50)
ppois(40,40)
ppois(50,40)
ppois(99,40)
ppois(88,40)
ppois(77,40)
?rbinom
rbinom(10,1,0.5)
rbinom(10,3,0.5)
rbinom(10,55,0.5)
?exp
library(ISLR)
names(Smarket)
head(Smarket)
Smarket[Direction==Up]
Smarket[Smarket$Direction==Up]
Smarket[Smarket$Direction=='Up']
Smarket[Smarket$Direction]
dim (Smarket)
Smarket$Dimension
Smarket$Direction
Smarket$Direction[Up]
Smarket[, Smarket$Direction == Up]
Smarket[, Smarket$Direction == "Up"]
Smarket[, Smarket$Direction == 'Up']
Smarket
names(Smarket)
help (Smarket)
str(Smarket)
Smarket[, Smarket$Direction == 'Up']
Smarket[Smarket$Direction %in% c('Up')]
Smarket[Smarket$Year == 2001]
Smarket[Year == 2001]
Smarket[Smarket$Year == 2001]
Smarket[Smarket$Year == 2001,]
Smarket[Smarket$Direction == 'Up',]
Smarket[Smarket$Direction == 'Up' && Smarket$Today < 0,]
summary(Smarket)
cor(Smarket)
cor(Smarket[,-9])
?cor
attach(Smarket)
plot(Volume)
?lm
glm.fit = glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data=Smarket, family=binomial)
summary(glm.fit)
coef(glm.fit)
summary(glm.fit)$coef
glm.probs = predict(glm.fit, type="response")
glm.probs[1:10]
contrasts(Direction)
glm.pred = rep("Down", 1250)
glm.pred[glm.probs > .5] = "Up"
table(glm.pred, Direction)
(507 + 145) /1250
mean(glm.pred == Direction)
head(glm.pred)
length(glm.pred == Direction)
glm.pred
glm.pred == Direction
length((glm.pred == Direction) == TRUE)
(glm.pred == Direction) == TRUE
stuff = (glm.pred == Direction)
stuff[stuff == TRUE]
length(stuff[stuff == TRUE])
train = (Year < 2005)
Smarket.2005 = Smarket[!train,]
dim(Smarket.2005)
Direction.2005 = Direction[$train]
Direction.2005 = Direction[!train]
Direction.2005
glm.fit = glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data=Smarket, family=binomial, subset=train)
glm.probs = predict(glm.fit, Smarket.2005, type="response")
glm.pred = rep("Down", 252)
glm.pred[glm.probs > .5] = "Up"
table(glm.pred, Direction.2005)
mean(glm.pred==Direction.2005)
mean(glm.pred!=Direction.2005)
glm.fit = glm(Direction ~ Lag1 + Lag2, data=Smarket, family=binomial, subset=train)
glm.probs = predict(glm.fit, Smarket.2005, type="response")
glm.pred = rep("Down", 252)
glm.pred[glm.probs > .5] = "Up"
table(glm.pred, Direction.2005)
predict(glm.fit, newdata=data.frame(Lag1=c(1.2,1.5), Lag2=c(1.1, -0.8)), type="response")
head(Laag1)
head(Lag1)
Lag1 == 1.2
which(Lag1 == 1.2)
which(Lag1 == 1.5)
?lm
?glm
library(MASS)
lda.fit = lda(Direction ~ Lag1 + Lag2, data = Smarket, subset=train)
lda.fit
plot(lda.fit)
lda.pred = predict(lda.fit, Smarket.2005)
names(lda.pred)
head(lda.pred)
lda.class = lda.pred$class
table(lda.class, Direction.2005)
mean(lda.class==Direction.2005)
head(lda.pred$posterior)
head(lda.pred$posterior[1])
sum(lda.pred$posterior[,1] >= .5)
sum(lda.pred$posterior[,1] < .5)
sum(lda.pred$posterior[,1] <= .5)
sum(lda.pred$posterior[,1] >= .9)
qda.fit = qda(Direction ~ Lag1+Lag2, data=Smarket, subset=train)
qda.fit
lda.fit
qda.fit
qda.class = predict(qda.fit, Smarket.2005)$class
table(qda.class, Direction.2005)
mean(qda.class==Direction.2005)
?lm
str(qda.class)
str(lda.fit)
str(lm.fit)
?predict
?plot
?contrasts
?attach
?predict
library(class)
train.X=cbind(Lag1,Lag2)[train,]
train.X
length(train.X)
length(train)
cbind(Lag1,Lag2)
cbind(Lag1,Lag2)[train,]
train.X=cbind(Lag1,Lag2)[train,]
test.X=cbind(Lag1,Lag2)[!train,]
train.Direction=Direction[train]
?cbind
set.seed(1)
knn.pred = knn(train.X, test.X, train.Y, 1)
knn.pred = knn(train.X, test.X, train.Direction, 1)
table(knn.pred, Direction.2005)
knn.pred = knn(train.X, test.X, train.Direction, 3)
table(knn.pred, Direction.2005)
mean(knn.pred==Direction.2005)
knn.pred = knn(train.X, test.X, train.Direction, 11)
mean(knn.pred==Direction.2005)
dim(caravan)
dim(Caravan)
attach(Caravan)
summary(Purchase)
summary(Purchase)[,1]
summary(Purchase)[1]
summary(Purchase)[0]
summary(Purchase)[2] / summary(Purchase)[1]
summary(Purchase)[2] / dim(Caravan)[1]
names(Caravan)
?Caravan
head(Caravan)
?names
x = c(1,3,66)
x
names(x)
names(x) = "kama"
x
names(x)
standardized.X = scale(Caravan[,-86])
summary(Caravan)
var(Caravan[,1])
var(Caravan[,4])
var(standardized.X[,4])
var(standardized.X[,1])
mean(standardized.X[,1])
mean(standardized.X[,4])
dim(Caravan)
test = 1:1000
train.X = standardized.X[-test,]
test.X = standardized.X[test,]
train.Y = Purchase[-test]
test.Y = Purchase[test]
set.seed(1)
knn.pred = knn(train.X, test.X, train.Y, 1)
mean(test.Y!=knn.pred)
head(test.Y)
mean(test.Y!="No")
mean(test.Y!="Yes")
knn.pred = knn(train.X, test.X, train.Y, 3)
mean(test.Y!=knn.pred)
knn.pred = knn(train.X, test.X, train.Y, 6)
mean(test.Y!=knn.pred)
knn.pred = knn(train.X, test.X, train.Y, 10)
mean(test.Y!=knn.pred)
table(knn.pred, test.Y)
knn.pred = knn(train.X, test.X, train.Y, 1)
table(knn.pred, test.Y)
set.seed(1)
knn.pred = knn(train.X, test.X, train.Y, 1)
table(knn.pred, test.Y)
set.seed(1)
knn.pred = knn(train.X, test.X, train.Y, 5)
table(knn.pred, test.Y)
table(knn.pred, test.Y)[2,2]
table(knn.pred, test.Y)[2,2] / table(knn.pred, test.Y)[2,1] + table(knn.pred, test.Y)[2,2]
table(knn.pred, test.Y)[2,2] / (table(knn.pred, test.Y)[2,1] + table(knn.pred, test.Y)[2,2])
mean(Purchase != "No")
glm.fit = glm(Purchase ~ ., data=Caravan, family=binomial, subset=-test)
glm.probs = predict(glm.fit, Caravan[test,], type="response")
glm.pred=rep("No",1000)
glm.pred[glm.probs>.5]="Yes"
table(glm.pred, test.Y)
glm.pred=rep("No",1000)
glm.pred[glm.probs>.25]="Yes"
table(glm.pred, test.Y)
ls
ls()
rm(ls())
setwd('/home/sloby/projects/vitro/2nd')
getwd()
ll
